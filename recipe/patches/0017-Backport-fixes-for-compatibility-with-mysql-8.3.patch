From 84a5683c48533da77cb3270167bcf9f540c77d5e Mon Sep 17 00:00:00 2001
From: Mark Harfouche <mark.harfouche@gmail.com>
Date: Fri, 15 Mar 2024 07:28:16 -0400
Subject: [PATCH] Backport fixes for compatibility with mysql 8.3

See https://codereview.qt-project.org/c/qt/qtbase/+/532555
---
 src/plugins/sqldrivers/mysql/qsql_mysql.cpp | 33 ++++++++-------------
 1 file changed, 13 insertions(+), 20 deletions(-)

diff --git a/src/plugins/sqldrivers/mysql/qsql_mysql.cpp b/src/plugins/sqldrivers/mysql/qsql_mysql.cpp
index 7ca055eea2..8c98b6ddea 100644
--- a/qtbase/src/plugins/sqldrivers/mysql/qsql_mysql.cpp
+++ b/qtbase/src/plugins/sqldrivers/mysql/qsql_mysql.cpp
@@ -922,7 +922,8 @@ bool QMYSQLResult::prepare(const QString& query)
         return false;
     }
 
-    if (mysql_stmt_param_count(d->stmt) > 0) {// allocate memory for outvalues
+    const auto paramCount = mysql_stmt_param_count(d->stmt);
+    if (paramCount > 0) { // allocate memory for outvalues
         d->outBinds = new MYSQL_BIND[mysql_stmt_param_count(d->stmt)];
     }
 
@@ -956,8 +957,8 @@ bool QMYSQLResult::exec()
         return false;
     }
 
-    if (mysql_stmt_param_count(d->stmt) > 0 &&
-        mysql_stmt_param_count(d->stmt) == (uint)values.count()) {
+    const unsigned long paramCount = mysql_stmt_param_count(d->stmt);
+    if (paramCount > 0 && paramCount == static_cast<size_t>(values.size())) {
 
         nullVector.resize(values.count());
         for (int i = 0; i < values.count(); ++i) {
@@ -1040,7 +1041,11 @@ bool QMYSQLResult::exec()
             }
         }
 
+#if defined(MARIADB_VERSION_ID) || MYSQL_VERSION_ID < 80300
         r = mysql_stmt_bind_param(d->stmt, d->outBinds);
+#else
+        r = mysql_stmt_bind_named_param(d->stmt, d->outBinds, paramCount, nullptr);
+#endif
         if (r != 0) {
             setLastError(qMakeStmtError(QCoreApplication::translate("QMYSQLResult",
                          "Unable to bind value"), QSqlError::StatementError, d->stmt));
@@ -1460,24 +1465,12 @@ QSqlIndex QMYSQLDriver::primaryIndex(const QString& tablename) const
 
 QSqlRecord QMYSQLDriver::record(const QString& tablename) const
 {
-    Q_D(const QMYSQLDriver);
-    QString table=tablename;
-    if(isIdentifierEscaped(table, QSqlDriver::TableName))
-        table = stripDelimiters(table, QSqlDriver::TableName);
-
-    QSqlRecord info;
     if (!isOpen())
-        return info;
-    MYSQL_RES* r = mysql_list_fields(d->mysql, table.toLocal8Bit().constData(), 0);
-    if (!r) {
-        return info;
-    }
-    MYSQL_FIELD* field;
-
-    while ((field = mysql_fetch_field(r)))
-        info.append(qToField(field, d->tc));
-    mysql_free_result(r);
-    return info;
+        return {};
+    QSqlQuery i(createResult());
+    QString stmt(QLatin1String("SELECT * FROM %1 LIMIT 0"));
+    i.exec(stmt.arg(escapeIdentifier(tablename, QSqlDriver::TableName)));
+    return i.record();
 }
 
 QVariant QMYSQLDriver::handle() const
-- 
2.43.2

